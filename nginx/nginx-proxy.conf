user nginx;
worker_processes 2;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Performance optimization notes for slow server:
    # 1. Set very long inactive time (30 days) to prevent premature eviction
    # 2. Increased keys_zone size to handle more cached items
    # 3. Use manager_files and manager_threshold to control cache maintenance load
    # 4. Consider using proxy_cache_background_update for popular content
    # 5. Enable proxy_cache_lock to prevent cache stampede on slow responses

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Cache settings for photos - optimized for slow server performance
    proxy_cache_path /var/cache/nginx/photos
                     levels=1:2
                     keys_zone=photos_cache:50m
                     max_size=4g
                     inactive=720h
                     use_temp_path=off
                     manager_files=100
                     manager_threshold=200
                     manager_sleep=300;

    server {
        listen 80;
        server_name _;

        # Cache configuration for image endpoints (highest priority)
        location ~ ^/photos/api/photos/([^/]+)/img(.*)$ {
            proxy_pass http://photos:8000/api/photos/$1/img$2$is_args$args;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            
            # Timeout and connection settings
            proxy_connect_timeout 10s;
            proxy_send_timeout 15s;
            proxy_read_timeout 15s;
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # Enable caching for images - optimized for slow server
            proxy_cache photos_cache;
            proxy_cache_valid 200 302 30d;  # Extended from 2d to 30d for slow server
            proxy_cache_valid 404 1h;       # Extended 404 cache to reduce repeated requests
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_lock on;
            proxy_cache_lock_timeout 10s;   # Prevent long waits on slow responses
            proxy_cache_lock_age 5s;        # Allow cache updates after 5s
            proxy_cache_background_update on; # Update cache in background for popular content
            proxy_cache_revalidate on;      # Use conditional requests when possible
            proxy_cache_key "$scheme$request_method$host$request_uri";
            
            # Add cache status header for debugging
            add_header X-Cache-Status $upstream_cache_status;
            add_header X-Cache-Key "$scheme$request_method$host$request_uri";
            
            # Extended cache headers for slow server optimization
            expires 30d;  # Extended from 2d to 30d
            add_header Cache-Control "public, immutable, max-age=2592000";  # 30 days
        }

        # All other photos endpoints (no caching) - strip /photos prefix
        location /photos/ {
            proxy_pass http://photos:8000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            
            # Timeout and connection settings
            proxy_connect_timeout 10s;
            proxy_send_timeout 15s;
            proxy_read_timeout 15s;
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # Disable caching for non-image endpoints
            proxy_cache off;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }

        # Proxy to files service (no caching)
        location /files/ {
            proxy_pass http://files:8000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            
            # Disable caching for non-image endpoints
            proxy_cache off;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }

        # Proxy to auth service (no caching)
        location /auth/ {
            proxy_pass http://auth:8000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            
            # Disable caching for auth endpoints
            proxy_cache off;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }

        # Health check endpoint
        location ~ ^/nginx/health$ {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Redirect /favicon.ico to SVG version
        location = /favicon.ico {
            return 302 https://$host/static/favicon.svg;
        }
        
        # Also handle direct SVG favicon requests
        location = /favicon.svg {
            return 302 https://$host/static/favicon.svg;
        }

        # Redirect root to /ui
        location = / {
            return 302 /ui/;
        }

        # SPA routing for ui (handle client-side routes)
        location /ui/ {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /ui/index.html;
        }

        # Static content served from /usr/share/nginx/html (lowest priority)
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            try_files $uri $uri/ =404;
        }

    }
}