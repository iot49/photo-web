volumes:
  traefik-certs:
    driver: local
  auth-data:
    driver: local
  nginx-cache:
    driver: local

networks:
  ingress:
    name: ingress   # traefik to proxied apps
  tunnel:
    name: tunnel    # cf tunnel to traefik

services:
  traefik:
    image: traefik:v3.1.5
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - .env
    environment:
      - CLOUDFLARE_DNS_API_TOKEN=${CF_API_TOKEN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/traefik-dynamic.yml:/etc/traefik/traefik-dynamic.yml:ro
      - traefik-certs:/var/traefik/certs
    labels:
      - traefik.enable=true
      # Dashboard router (for UI)
      # TIP: would be nice to server at /traefik istead of subdomain. IT WON'T WORK!
      - traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${ROOT_DOMAIN}`) && PathPrefix(`/`)
      - traefik.http.routers.traefik-dashboard.tls=true
      - traefik.http.routers.traefik-dashboard.tls.certresolver=cloudflare
      - traefik.http.routers.traefik-dashboard.entrypoints=websecure
      - traefik.http.routers.traefik-dashboard.service=dashboard@internal
      - traefik.http.routers.traefik-dashboard.middlewares=authorize@file
      - traefik.http.routers.traefik-dashboard.priority=1
      # API router (for data endpoints)
      - traefik.http.routers.traefik-api.rule=Host(`traefik.${ROOT_DOMAIN}`) && PathPrefix(`/api`)
      - traefik.http.routers.traefik-api.tls=true
      - traefik.http.routers.traefik-api.tls.certresolver=cloudflare
      - traefik.http.routers.traefik-api.entrypoints=websecure
      - traefik.http.routers.traefik-api.service=api@internal
      - traefik.http.routers.traefik-api.middlewares=authorize@file
      - traefik.http.routers.traefik-api.priority=2
    networks:
      - ingress
      - tunnel


  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./nginx/nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/html:/usr/share/nginx/html:ro # static content
      - nginx-cache:/var/cache/nginx # cache volume
    labels:
      - "traefik.enable=true"
      # Route root domain and photos/auth paths through nginx
      - "traefik.http.routers.nginx.rule=Host(`${ROOT_DOMAIN}`)"
      - "traefik.http.routers.nginx.entrypoints=websecure"
      - "traefik.http.routers.nginx.tls=true"
      - "traefik.http.routers.nginx.tls.certresolver=cloudflare"
      - "traefik.http.routers.nginx.priority=20"
      - "traefik.http.routers.nginx.middlewares=authorize@file"
      - "traefik.http.services.nginx.loadbalancer.server.port=80" # Default nginx port
    networks:
      - ingress
    depends_on:
      - photos
      - auth
      - doc

  auth:
    build: ./auth
    image: auth-service:latest
    container_name: auth
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - auth-data:/app/data # SQLite database storage
    # No direct Traefik labels - accessed through nginx proxy
    networks:
      - ingress  # Added for traefik middleware access
      
  photos:
    build: ./photos/app
    image: photos-service:latest
    container_name: photos
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      # IMPORTANT: give Docker and Terminal "Full Disk Access" in System Preferences/Privacy & Security
      - ${PHOTOS_LIBRARY}:${PHOTOS_LIBRARY_MOUNT}:ro
    # No direct Traefik labels - accessed through nginx proxy
    networks:
      - ingress

  doc:
    build: ./doc/app
    image: doc-service:latest
    container_name: doc
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ${DOCS}:/docs:ro
    # No direct Traefik labels - accessed through nginx proxy
    networks:
      - ingress
      
  # TODO: create a cloudflared service that
  # 1) adds DNS entries for ${BASE_URL} and traefik.${BASE_URL} on Cloudflare (if they do not exist)
  # 2) forwards all requests to ${BASE_URL} and traefik.${BASE_URL} to the traefik service (unencrypted) via the tunnel network